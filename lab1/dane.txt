__name__ = __main__
__doc__ = Automatically created module for IPython interactive environment
__package__ = None
__loader__ = None
__spec__ = None
__builtin__ = <module 'builtins' (built-in)>
__builtins__ = <module 'builtins' (built-in)>
_ih = ['', '#5.1\nfrom scipy.optimize import newton\n\nx = 3\nroot = newton(np.sin, x, fprime=np.cos)\n\nprint(root)', 'import numpy as np\nfrom pathlib import Path', '################################################################################\n#1', '#1.1\nA = np.array([[2,-7],\n                   [5,4]])\nB = np.array([[6,1],\n            [4,-3]])\nfile = np.array([4,1])', '#1.2\n#a\nprint("Rozmiar A: ", A.shape)\nprint("Rozmiar f: ", file.shape)', '#b\nprint("Transpozycja B\\n", B.T)', '#c\nResult = np.dot(A+B, A+B) + 2*(A-B)\nprint("Wynik\\n", Result)', '#d\nC = np.hstack((A, B))\nh = np.hstack((file, file))\nprint(C)\nprint(h)', '#e\nprint(np.dot(C,h))', '#1.3\n#a\nprint(locals())', '#b\nwith open("dane.txt", "w") as file:\n    for k, v in locals().items():\n        file.write(f"{k} = {v}\\n")', 'import numpy as np\nfrom pathlib import Path', '################################################################################\n#1', '#1.1\nA = np.array([[2,-7],\n                   [5,4]])\nB = np.array([[6,1],\n            [4,-3]])\nfile = np.array([4,1])', '#1.2\n#a\nprint("Rozmiar A: ", A.shape)\nprint("Rozmiar f: ", file.shape)', '#b\nprint("Transpozycja B\\n", B.T)', '#c\nResult = np.dot(A+B, A+B) + 2*(A-B)\nprint("Wynik\\n", Result)', '#d\nC = np.hstack((A, B))\nh = np.hstack((file, file))\nprint(C)\nprint(h)', '#e\nprint(np.dot(C,h))', '#1.3\n#a\nprint(locals())', '#b\nwith open("dane.txt", "w") as file:\n    for k, v in locals().items():\n        file.write(f"{k} = {v}\\n")']
_oh = {}
_dh = [PosixPath('/home/jarzeckil/Documents/projects/mnum/lab1')]
In = ['', '#5.1\nfrom scipy.optimize import newton\n\nx = 3\nroot = newton(np.sin, x, fprime=np.cos)\n\nprint(root)', 'import numpy as np\nfrom pathlib import Path', '################################################################################\n#1', '#1.1\nA = np.array([[2,-7],\n                   [5,4]])\nB = np.array([[6,1],\n            [4,-3]])\nfile = np.array([4,1])', '#1.2\n#a\nprint("Rozmiar A: ", A.shape)\nprint("Rozmiar f: ", file.shape)', '#b\nprint("Transpozycja B\\n", B.T)', '#c\nResult = np.dot(A+B, A+B) + 2*(A-B)\nprint("Wynik\\n", Result)', '#d\nC = np.hstack((A, B))\nh = np.hstack((file, file))\nprint(C)\nprint(h)', '#e\nprint(np.dot(C,h))', '#1.3\n#a\nprint(locals())', '#b\nwith open("dane.txt", "w") as file:\n    for k, v in locals().items():\n        file.write(f"{k} = {v}\\n")', 'import numpy as np\nfrom pathlib import Path', '################################################################################\n#1', '#1.1\nA = np.array([[2,-7],\n                   [5,4]])\nB = np.array([[6,1],\n            [4,-3]])\nfile = np.array([4,1])', '#1.2\n#a\nprint("Rozmiar A: ", A.shape)\nprint("Rozmiar f: ", file.shape)', '#b\nprint("Transpozycja B\\n", B.T)', '#c\nResult = np.dot(A+B, A+B) + 2*(A-B)\nprint("Wynik\\n", Result)', '#d\nC = np.hstack((A, B))\nh = np.hstack((file, file))\nprint(C)\nprint(h)', '#e\nprint(np.dot(C,h))', '#1.3\n#a\nprint(locals())', '#b\nwith open("dane.txt", "w") as file:\n    for k, v in locals().items():\n        file.write(f"{k} = {v}\\n")']
Out = {}
get_ipython = <bound method InteractiveShell.get_ipython of <ipykernel.zmqshell.ZMQInteractiveShell object at 0x7fea7071c590>>
exit = <IPython.core.autocall.ZMQExitAutocall object at 0x7fea707bd7f0>
quit = <IPython.core.autocall.ZMQExitAutocall object at 0x7fea707bd7f0>
open = <function open at 0x7fea768e3d80>
_ = 
__ = 
___ = 
__vsc_ipynb_file__ = /home/jarzeckil/Documents/projects/mnum/lab1/lab1.ipynb
_i = #1.3
#a
print(locals())
_ii = #e
print(np.dot(C,h))
_iii = #d
C = np.hstack((A, B))
h = np.hstack((file, file))
print(C)
print(h)
_i1 = #5.1
from scipy.optimize import newton

x = 3
root = newton(np.sin, x, fprime=np.cos)

print(root)
newton = <function newton at 0x7fe9ff3c4d60>
x = 3
_i2 = import numpy as np
from pathlib import Path
np = <module 'numpy' from '/home/jarzeckil/Documents/projects/mnum/venv/lib64/python3.13/site-packages/numpy/__init__.py'>
Path = <class 'pathlib._local.Path'>
_i3 = ################################################################################
#1
_i4 = #1.1
A = np.array([[2,-7],
                   [5,4]])
B = np.array([[6,1],
            [4,-3]])
file = np.array([4,1])
A = [[ 2 -7]
 [ 5  4]]
B = [[ 6  1]
 [ 4 -3]]
file = <_io.TextIOWrapper name='dane.txt' mode='w' encoding='UTF-8'>
_i5 = #1.2
#a
print("Rozmiar A: ", A.shape)
print("Rozmiar f: ", file.shape)
_i6 = #b
print("Transpozycja B\n", B.T)
_i7 = #c
Result = np.dot(A+B, A+B) + 2*(A-B)
print("Wynik\n", Result)
Result = [[  2 -70]
 [ 83 -39]]
_i8 = #d
C = np.hstack((A, B))
h = np.hstack((file, file))
print(C)
print(h)
C = [[ 2 -7  6  1]
 [ 5  4  4 -3]]
h = [4 1 4 1]
_i9 = #e
print(np.dot(C,h))
_i10 = #1.3
#a
print(locals())
_i11 = #b
with open("dane.txt", "w") as file:
    for k, v in locals().items():
        file.write(f"{k} = {v}\n")
k = _i11
v = _i11
_i12 = import numpy as np
from pathlib import Path
_i13 = ################################################################################
#1
_i14 = #1.1
A = np.array([[2,-7],
                   [5,4]])
B = np.array([[6,1],
            [4,-3]])
file = np.array([4,1])
_i15 = #1.2
#a
print("Rozmiar A: ", A.shape)
print("Rozmiar f: ", file.shape)
_i16 = #b
print("Transpozycja B\n", B.T)
_i17 = #c
Result = np.dot(A+B, A+B) + 2*(A-B)
print("Wynik\n", Result)
_i18 = #d
C = np.hstack((A, B))
h = np.hstack((file, file))
print(C)
print(h)
_i19 = #e
print(np.dot(C,h))
_i20 = #1.3
#a
print(locals())
_i21 = #b
with open("dane.txt", "w") as file:
    for k, v in locals().items():
        file.write(f"{k} = {v}\n")
